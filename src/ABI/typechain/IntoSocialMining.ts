/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IntoSocialMiningInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "POXMintAmount"
      | "POXMintStatusDay"
      | "POXTokenAddress"
      | "POXTotalMintAmount"
      | "PledgeMining"
      | "addAdmin"
      | "addBalanceWithAdmin"
      | "allAdmins"
      | "batchAddAdmin"
      | "consume"
      | "everDayMining"
      | "everDayMiningRemaining"
      | "getActiveSocialNum"
      | "getCommissionRate"
      | "getDayTime"
      | "getMingStatus"
      | "getWithdrawBalance"
      | "initBaseWeight"
      | "initialize"
      | "intoEarlyBird"
      | "intoMining"
      | "intoMiningWithAdmin"
      | "isAdmin"
      | "isMining"
      | "miningBalance"
      | "miningEndTime"
      | "miningPool"
      | "miningRemaining"
      | "miningStartTime"
      | "miningSum"
      | "miningTopUp"
      | "miningWithdraw"
      | "removeAdmin"
      | "renounceAdmin"
      | "rewardAmount"
      | "rewardNum"
      | "rewardTotalAmount"
      | "setDateTimeInterface"
      | "setEverDayMining"
      | "setFaceAuthInterface"
      | "setInitBaseWeight"
      | "setIntoEarlyBirdAddress"
      | "setIntoSocialWeightInterface"
      | "setMiningPoolInterface"
      | "setPOXTokenInterface"
      | "setPOXTotalMintAmount"
      | "setPledgeMiningInterface"
      | "setRelationInterface"
      | "setRewardTotalAmount"
      | "subBalanceWithAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "Initialized"
      | "IntoMining"
      | "IntoMiningReward"
      | "IntoMiningToParent"
      | "MiningAmount"
      | "MiningToUp"
      | "MiningWithdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "POXMintAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POXMintStatusDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "POXTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POXTotalMintAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PledgeMining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBalanceWithAdmin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "allAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchAddAdmin",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "consume",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "everDayMining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "everDayMiningRemaining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSocialNum",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDayTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMingStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initBaseWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intoEarlyBird",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intoMining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intoMiningWithAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMining",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "miningBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "miningEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "miningPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "miningRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "miningStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "miningSum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningTopUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "miningWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardNum",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDateTimeInterface",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEverDayMining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFaceAuthInterface",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitBaseWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntoEarlyBirdAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntoSocialWeightInterface",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMiningPoolInterface",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPOXTokenInterface",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPOXTotalMintAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPledgeMiningInterface",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelationInterface",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTotalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subBalanceWithAdmin",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "POXMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POXMintStatusDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POXTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POXTotalMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PledgeMining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBalanceWithAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "everDayMining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "everDayMiningRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSocialNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDayTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initBaseWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intoEarlyBird",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "intoMining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intoMiningWithAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "miningEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "miningPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "miningStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "miningSum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningTopUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "miningWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDateTimeInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEverDayMining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFaceAuthInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitBaseWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntoEarlyBirdAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntoSocialWeightInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMiningPoolInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPOXTokenInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPOXTotalMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPledgeMiningInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelationInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subBalanceWithAdmin",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntoMiningEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [sender: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntoMiningRewardEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    rewardNum: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    amount: bigint,
    rewardNum: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    rewardNum: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntoMiningToParentEvent {
  export type InputTuple = [
    sender: AddressLike,
    parent: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    parent: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    sender: string;
    parent: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MiningAmountEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    from: AddressLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    amount: bigint,
    from: string,
    status: bigint
  ];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    from: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MiningToUpEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [sender: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MiningWithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    commissionAmount: BigNumberish,
    commissionRate: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    amount: bigint,
    commissionAmount: bigint,
    commissionRate: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    commissionAmount: bigint;
    commissionRate: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IntoSocialMining extends BaseContract {
  connect(runner?: ContractRunner | null): IntoSocialMining;
  waitForDeployment(): Promise<this>;

  interface: IntoSocialMiningInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  POXMintAmount: TypedContractMethod<[], [bigint], "view">;

  POXMintStatusDay: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  POXTokenAddress: TypedContractMethod<[], [string], "view">;

  POXTotalMintAmount: TypedContractMethod<[], [bigint], "view">;

  PledgeMining: TypedContractMethod<[], [string], "view">;

  addAdmin: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  addBalanceWithAdmin: TypedContractMethod<
    [sender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  allAdmins: TypedContractMethod<[], [string[]], "view">;

  batchAddAdmin: TypedContractMethod<
    [amounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  consume: TypedContractMethod<
    [sender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  everDayMining: TypedContractMethod<[], [bigint], "view">;

  everDayMiningRemaining: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getActiveSocialNum: TypedContractMethod<
    [sender: AddressLike],
    [bigint],
    "view"
  >;

  getCommissionRate: TypedContractMethod<
    [sender: AddressLike],
    [bigint],
    "view"
  >;

  getDayTime: TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;

  getMingStatus: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  getWithdrawBalance: TypedContractMethod<
    [sender: AddressLike],
    [bigint],
    "view"
  >;

  initBaseWeight: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  intoEarlyBird: TypedContractMethod<[], [string], "view">;

  intoMining: TypedContractMethod<[], [void], "nonpayable">;

  intoMiningWithAdmin: TypedContractMethod<
    [sender: AddressLike],
    [void],
    "nonpayable"
  >;

  isAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isMining: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  miningBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  miningEndTime: TypedContractMethod<[], [bigint], "view">;

  miningPool: TypedContractMethod<[], [string], "view">;

  miningRemaining: TypedContractMethod<[], [bigint], "view">;

  miningStartTime: TypedContractMethod<[], [bigint], "view">;

  miningSum: TypedContractMethod<[], [bigint], "view">;

  miningTopUp: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  miningWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceAdmin: TypedContractMethod<[], [void], "nonpayable">;

  rewardAmount: TypedContractMethod<[], [bigint], "view">;

  rewardNum: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rewardTotalAmount: TypedContractMethod<[], [bigint], "view">;

  setDateTimeInterface: TypedContractMethod<
    [_DateTime: AddressLike],
    [void],
    "nonpayable"
  >;

  setEverDayMining: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFaceAuthInterface: TypedContractMethod<
    [_faceAuth: AddressLike],
    [void],
    "nonpayable"
  >;

  setInitBaseWeight: TypedContractMethod<
    [weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIntoEarlyBirdAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setIntoSocialWeightInterface: TypedContractMethod<
    [_IntoSocialWeight: AddressLike],
    [void],
    "nonpayable"
  >;

  setMiningPoolInterface: TypedContractMethod<
    [mingPoolAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setPOXTokenInterface: TypedContractMethod<
    [_POXTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setPOXTotalMintAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPledgeMiningInterface: TypedContractMethod<
    [pledgeMining: AddressLike],
    [void],
    "nonpayable"
  >;

  setRelationInterface: TypedContractMethod<
    [_relation: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewardTotalAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  subBalanceWithAdmin: TypedContractMethod<
    [sender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "POXMintAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POXMintStatusDay"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "POXTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POXTotalMintAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PledgeMining"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBalanceWithAdmin"
  ): TypedContractMethod<
    [sender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "batchAddAdmin"
  ): TypedContractMethod<[amounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "consume"
  ): TypedContractMethod<
    [sender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "everDayMining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "everDayMiningRemaining"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getActiveSocialNum"
  ): TypedContractMethod<[sender: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCommissionRate"
  ): TypedContractMethod<[sender: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDayTime"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMingStatus"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getWithdrawBalance"
  ): TypedContractMethod<[sender: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initBaseWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "intoEarlyBird"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "intoMining"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "intoMiningWithAdmin"
  ): TypedContractMethod<[sender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMining"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "miningBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "miningEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "miningPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "miningRemaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "miningStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "miningSum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "miningTopUp"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "miningWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardNum"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTotalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDateTimeInterface"
  ): TypedContractMethod<[_DateTime: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEverDayMining"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFaceAuthInterface"
  ): TypedContractMethod<[_faceAuth: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInitBaseWeight"
  ): TypedContractMethod<[weight: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIntoEarlyBirdAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIntoSocialWeightInterface"
  ): TypedContractMethod<
    [_IntoSocialWeight: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMiningPoolInterface"
  ): TypedContractMethod<[mingPoolAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPOXTokenInterface"
  ): TypedContractMethod<[_POXTokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPOXTotalMintAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPledgeMiningInterface"
  ): TypedContractMethod<[pledgeMining: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRelationInterface"
  ): TypedContractMethod<[_relation: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardTotalAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subBalanceWithAdmin"
  ): TypedContractMethod<
    [sender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "IntoMining"
  ): TypedContractEvent<
    IntoMiningEvent.InputTuple,
    IntoMiningEvent.OutputTuple,
    IntoMiningEvent.OutputObject
  >;
  getEvent(
    key: "IntoMiningReward"
  ): TypedContractEvent<
    IntoMiningRewardEvent.InputTuple,
    IntoMiningRewardEvent.OutputTuple,
    IntoMiningRewardEvent.OutputObject
  >;
  getEvent(
    key: "IntoMiningToParent"
  ): TypedContractEvent<
    IntoMiningToParentEvent.InputTuple,
    IntoMiningToParentEvent.OutputTuple,
    IntoMiningToParentEvent.OutputObject
  >;
  getEvent(
    key: "MiningAmount"
  ): TypedContractEvent<
    MiningAmountEvent.InputTuple,
    MiningAmountEvent.OutputTuple,
    MiningAmountEvent.OutputObject
  >;
  getEvent(
    key: "MiningToUp"
  ): TypedContractEvent<
    MiningToUpEvent.InputTuple,
    MiningToUpEvent.OutputTuple,
    MiningToUpEvent.OutputObject
  >;
  getEvent(
    key: "MiningWithdraw"
  ): TypedContractEvent<
    MiningWithdrawEvent.InputTuple,
    MiningWithdrawEvent.OutputTuple,
    MiningWithdrawEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "IntoMining(address,uint256,uint256)": TypedContractEvent<
      IntoMiningEvent.InputTuple,
      IntoMiningEvent.OutputTuple,
      IntoMiningEvent.OutputObject
    >;
    IntoMining: TypedContractEvent<
      IntoMiningEvent.InputTuple,
      IntoMiningEvent.OutputTuple,
      IntoMiningEvent.OutputObject
    >;

    "IntoMiningReward(address,uint256,uint256,uint256)": TypedContractEvent<
      IntoMiningRewardEvent.InputTuple,
      IntoMiningRewardEvent.OutputTuple,
      IntoMiningRewardEvent.OutputObject
    >;
    IntoMiningReward: TypedContractEvent<
      IntoMiningRewardEvent.InputTuple,
      IntoMiningRewardEvent.OutputTuple,
      IntoMiningRewardEvent.OutputObject
    >;

    "IntoMiningToParent(address,address,uint256,uint256)": TypedContractEvent<
      IntoMiningToParentEvent.InputTuple,
      IntoMiningToParentEvent.OutputTuple,
      IntoMiningToParentEvent.OutputObject
    >;
    IntoMiningToParent: TypedContractEvent<
      IntoMiningToParentEvent.InputTuple,
      IntoMiningToParentEvent.OutputTuple,
      IntoMiningToParentEvent.OutputObject
    >;

    "MiningAmount(address,uint256,address,uint256)": TypedContractEvent<
      MiningAmountEvent.InputTuple,
      MiningAmountEvent.OutputTuple,
      MiningAmountEvent.OutputObject
    >;
    MiningAmount: TypedContractEvent<
      MiningAmountEvent.InputTuple,
      MiningAmountEvent.OutputTuple,
      MiningAmountEvent.OutputObject
    >;

    "MiningToUp(address,uint256,uint256)": TypedContractEvent<
      MiningToUpEvent.InputTuple,
      MiningToUpEvent.OutputTuple,
      MiningToUpEvent.OutputObject
    >;
    MiningToUp: TypedContractEvent<
      MiningToUpEvent.InputTuple,
      MiningToUpEvent.OutputTuple,
      MiningToUpEvent.OutputObject
    >;

    "MiningWithdraw(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MiningWithdrawEvent.InputTuple,
      MiningWithdrawEvent.OutputTuple,
      MiningWithdrawEvent.OutputObject
    >;
    MiningWithdraw: TypedContractEvent<
      MiningWithdrawEvent.InputTuple,
      MiningWithdrawEvent.OutputTuple,
      MiningWithdrawEvent.OutputObject
    >;
  };
}
