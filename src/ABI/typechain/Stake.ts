/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StakeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "addStakePackage"
      | "allAdmins"
      | "batchAddAdmin"
      | "childWeight"
      | "decimals"
      | "endPledgeId"
      | "exchangeTime"
      | "getHoldPackageCount"
      | "getMiningIds"
      | "getMiningTypeIds"
      | "getNextDayTimestamp"
      | "getPackageUnTimes"
      | "getThirtyTimestamp"
      | "getTodayTimestamp"
      | "getTodayWeight"
      | "getTotalTypeId"
      | "getTotayStake"
      | "getTypeIdWithIndex"
      | "getWeightWithTimestamp"
      | "initialize"
      | "isAdmin"
      | "isUpdatePP"
      | "miningIds"
      | "ownerWeight"
      | "pledgeExpireTime"
      | "pledgeTypeId"
      | "removeAdmin"
      | "renounceAdmin"
      | "setAboutAddress"
      | "stake"
      | "topPledge"
      | "unusedTimes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "ExchangePackage"
      | "Initialized"
      | "Stake"
      | "StakeMintId"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addStakePackage",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "allAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchAddAdmin",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "childWeight",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endPledgeId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeTime",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHoldPackageCount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningTypeIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDayTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPackageUnTimes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getThirtyTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTodayTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTodayWeight",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTypeId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotayStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeIdWithIndex",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeightWithTimestamp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUpdatePP",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "miningIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWeight",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeExpireTime",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeTypeId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAboutAddress",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "topPledge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unusedTimes",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStakePackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endPledgeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHoldPackageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningTypeIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDayTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPackageUnTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThirtyTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTodayTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTodayWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTypeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotayStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeIdWithIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeightWithTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUpdatePP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "miningIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgeExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgeTypeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAboutAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topPledge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unusedTimes",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangePackageEvent {
  export type InputTuple = [
    addr: AddressLike,
    index: BigNumberish,
    typeId: BigNumberish
  ];
  export type OutputTuple = [addr: string, index: bigint, typeId: bigint];
  export interface OutputObject {
    addr: string;
    index: bigint;
    typeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [addr: AddressLike, reward: BigNumberish];
  export type OutputTuple = [addr: string, reward: bigint];
  export interface OutputObject {
    addr: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeMintIdEvent {
  export type InputTuple = [addr: AddressLike, typeIds: BigNumberish[]];
  export type OutputTuple = [addr: string, typeIds: bigint[]];
  export interface OutputObject {
    addr: string;
    typeIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Stake extends BaseContract {
  connect(runner?: ContractRunner | null): Stake;
  waitForDeployment(): Promise<this>;

  interface: StakeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  addStakePackage: TypedContractMethod<
    [
      _addr: AddressLike,
      _typeId: BigNumberish,
      _times: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  allAdmins: TypedContractMethod<[], [string[]], "view">;

  batchAddAdmin: TypedContractMethod<
    [amounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  childWeight: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  endPledgeId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  exchangeTime: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getHoldPackageCount: TypedContractMethod<
    [_addr: AddressLike, _typeId: BigNumberish],
    [bigint],
    "view"
  >;

  getMiningIds: TypedContractMethod<[_addr: AddressLike], [bigint[]], "view">;

  getMiningTypeIds: TypedContractMethod<
    [_addr: AddressLike],
    [bigint[]],
    "view"
  >;

  getNextDayTimestamp: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getPackageUnTimes: TypedContractMethod<
    [_addr: AddressLike],
    [[bigint[], bigint[], bigint[], bigint[]]],
    "view"
  >;

  getThirtyTimestamp: TypedContractMethod<[], [bigint], "view">;

  getTodayTimestamp: TypedContractMethod<[], [bigint], "view">;

  getTodayWeight: TypedContractMethod<[sender: AddressLike], [bigint], "view">;

  getTotalTypeId: TypedContractMethod<
    [addr: AddressLike],
    [[bigint[], bigint[], bigint[]]],
    "view"
  >;

  getTotayStake: TypedContractMethod<
    [_addr: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  getTypeIdWithIndex: TypedContractMethod<
    [addr: AddressLike, start: BigNumberish, end: BigNumberish],
    [[bigint[], bigint[]]],
    "view"
  >;

  getWeightWithTimestamp: TypedContractMethod<
    [sender: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isUpdatePP: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  miningIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  ownerWeight: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pledgeExpireTime: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  pledgeTypeId: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  removeAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceAdmin: TypedContractMethod<[], [void], "nonpayable">;

  setAboutAddress: TypedContractMethod<
    [
      _relationAddr: AddressLike,
      _pledgeWeightAddr: AddressLike,
      _poolAddr: AddressLike,
      _intoSocialMiningAddr: AddressLike,
      _pledgeVipAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;

  topPledge: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  unusedTimes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addStakePackage"
  ): TypedContractMethod<
    [
      _addr: AddressLike,
      _typeId: BigNumberish,
      _times: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "batchAddAdmin"
  ): TypedContractMethod<[amounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "childWeight"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endPledgeId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchangeTime"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHoldPackageCount"
  ): TypedContractMethod<
    [_addr: AddressLike, _typeId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMiningIds"
  ): TypedContractMethod<[_addr: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMiningTypeIds"
  ): TypedContractMethod<[_addr: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getNextDayTimestamp"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPackageUnTimes"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [[bigint[], bigint[], bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getThirtyTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTodayTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTodayWeight"
  ): TypedContractMethod<[sender: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalTypeId"
  ): TypedContractMethod<
    [addr: AddressLike],
    [[bigint[], bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotayStake"
  ): TypedContractMethod<[_addr: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getTypeIdWithIndex"
  ): TypedContractMethod<
    [addr: AddressLike, start: BigNumberish, end: BigNumberish],
    [[bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWeightWithTimestamp"
  ): TypedContractMethod<
    [sender: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUpdatePP"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "miningIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerWeight"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pledgeExpireTime"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pledgeTypeId"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAboutAddress"
  ): TypedContractMethod<
    [
      _relationAddr: AddressLike,
      _pledgeWeightAddr: AddressLike,
      _poolAddr: AddressLike,
      _intoSocialMiningAddr: AddressLike,
      _pledgeVipAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "topPledge"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unusedTimes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ExchangePackage"
  ): TypedContractEvent<
    ExchangePackageEvent.InputTuple,
    ExchangePackageEvent.OutputTuple,
    ExchangePackageEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "StakeMintId"
  ): TypedContractEvent<
    StakeMintIdEvent.InputTuple,
    StakeMintIdEvent.OutputTuple,
    StakeMintIdEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "ExchangePackage(address,uint256,uint256)": TypedContractEvent<
      ExchangePackageEvent.InputTuple,
      ExchangePackageEvent.OutputTuple,
      ExchangePackageEvent.OutputObject
    >;
    ExchangePackage: TypedContractEvent<
      ExchangePackageEvent.InputTuple,
      ExchangePackageEvent.OutputTuple,
      ExchangePackageEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Stake(address,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "StakeMintId(address,uint256[])": TypedContractEvent<
      StakeMintIdEvent.InputTuple,
      StakeMintIdEvent.OutputTuple,
      StakeMintIdEvent.OutputObject
    >;
    StakeMintId: TypedContractEvent<
      StakeMintIdEvent.InputTuple,
      StakeMintIdEvent.OutputTuple,
      StakeMintIdEvent.OutputObject
    >;
  };
}
