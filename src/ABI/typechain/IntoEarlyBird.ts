/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IntoEarlyBirdInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MUSDTAddress"
      | "Migrate"
      | "addAdmin"
      | "allAdmins"
      | "alreadyPurchased"
      | "batchAddAdmin"
      | "buyEarlyBirdPackage"
      | "consumableBalanceTransferable"
      | "consume"
      | "eachRelease"
      | "earlyBirdAmount"
      | "earlyBirdPrice"
      | "getPledgeBalance"
      | "initialize"
      | "intoEarlyBirdInit"
      | "isAdmin"
      | "pledge"
      | "pledgeBalanceNontransferable"
      | "pledgeBalanceTransferable"
      | "qualification"
      | "qualified"
      | "releasedBalance"
      | "removeAdmin"
      | "renounceAdmin"
      | "setEarlyBirdAmount"
      | "setEarlyBirdPrice"
      | "setMUSDTAddress"
      | "setQualification"
      | "setQualified"
      | "transfer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "EarlyBirdPackage"
      | "Initialized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MUSDTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Migrate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "allAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "alreadyPurchased",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAddAdmin",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyEarlyBirdPackage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consumableBalanceTransferable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consume",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eachRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyBirdAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyBirdPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPledgeBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intoEarlyBirdInit",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pledge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeBalanceNontransferable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeBalanceTransferable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "qualification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "qualified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releasedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlyBirdAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlyBirdPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMUSDTAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setQualification",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setQualified",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MUSDTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alreadyPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyEarlyBirdPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumableBalanceTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eachRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyBirdAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyBirdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPledgeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intoEarlyBirdInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgeBalanceNontransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgeBalanceTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qualification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "qualified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyBirdAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyBirdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMUSDTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQualification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQualified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EarlyBirdPackageEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IntoEarlyBird extends BaseContract {
  connect(runner?: ContractRunner | null): IntoEarlyBird;
  waitForDeployment(): Promise<this>;

  interface: IntoEarlyBirdInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MUSDTAddress: TypedContractMethod<[], [string], "view">;

  Migrate: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addAdmin: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  allAdmins: TypedContractMethod<[], [string[]], "view">;

  alreadyPurchased: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  batchAddAdmin: TypedContractMethod<
    [amounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  buyEarlyBirdPackage: TypedContractMethod<[], [void], "nonpayable">;

  consumableBalanceTransferable: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  consume: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  eachRelease: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  earlyBirdAmount: TypedContractMethod<[], [bigint], "view">;

  earlyBirdPrice: TypedContractMethod<[], [bigint], "view">;

  getPledgeBalance: TypedContractMethod<[from: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  intoEarlyBirdInit: TypedContractMethod<
    [from: AddressLike[], totalAmount: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  isAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  pledge: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  pledgeBalanceNontransferable: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  pledgeBalanceTransferable: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  qualification: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  qualified: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  releasedBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  removeAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceAdmin: TypedContractMethod<[], [void], "nonpayable">;

  setEarlyBirdAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEarlyBirdPrice: TypedContractMethod<
    [price: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMUSDTAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setQualification: TypedContractMethod<
    [account: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setQualified: TypedContractMethod<
    [account: AddressLike[]],
    [void],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, types: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MUSDTAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "Migrate"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "alreadyPurchased"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchAddAdmin"
  ): TypedContractMethod<[amounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyEarlyBirdPackage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "consumableBalanceTransferable"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "consume"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eachRelease"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "earlyBirdAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "earlyBirdPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPledgeBalance"
  ): TypedContractMethod<[from: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "intoEarlyBirdInit"
  ): TypedContractMethod<
    [from: AddressLike[], totalAmount: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pledge"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pledgeBalanceNontransferable"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pledgeBalanceTransferable"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "qualification"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "qualified"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "releasedBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEarlyBirdAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEarlyBirdPrice"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMUSDTAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setQualification"
  ): TypedContractMethod<[account: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setQualified"
  ): TypedContractMethod<[account: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, types: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EarlyBirdPackage"
  ): TypedContractEvent<
    EarlyBirdPackageEvent.InputTuple,
    EarlyBirdPackageEvent.OutputTuple,
    EarlyBirdPackageEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "EarlyBirdPackage(address,uint256)": TypedContractEvent<
      EarlyBirdPackageEvent.InputTuple,
      EarlyBirdPackageEvent.OutputTuple,
      EarlyBirdPackageEvent.OutputObject
    >;
    EarlyBirdPackage: TypedContractEvent<
      EarlyBirdPackageEvent.InputTuple,
      EarlyBirdPackageEvent.OutputTuple,
      EarlyBirdPackageEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
