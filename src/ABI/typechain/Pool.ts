/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "allAdmins"
      | "batchAddAdmin"
      | "dailyEarnings"
      | "decimals"
      | "exchange"
      | "getPledgePackageWithTypeId"
      | "initialize"
      | "isAdmin"
      | "isExchangeOpen"
      | "isWithdraw"
      | "pledgeReward"
      | "pledgeTimes"
      | "pledgeToken"
      | "pledgeTopHold"
      | "pledgeWeight"
      | "removeAdmin"
      | "renounceAdmin"
      | "setAboutAddress"
      | "setPledgePackage"
      | "setPledgePackages"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "Initialized"
      | "PledgePackage"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "allAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchAddAdmin",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPledgePackageWithTypeId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExchangeOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeTimes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeTopHold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAboutAddress",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPledgePackage",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPledgePackages",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPledgePackageWithTypeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExchangeOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWithdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgeTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgeTopHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgeWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAboutAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPledgePackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPledgePackages",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PledgePackageEvent {
  export type InputTuple = [
    typeId: BigNumberish,
    pledgeToken: BigNumberish,
    pledgeReward: BigNumberish,
    pledgeTimes: BigNumberish,
    pledgeTopHold: BigNumberish
  ];
  export type OutputTuple = [
    typeId: bigint,
    pledgeToken: bigint,
    pledgeReward: bigint,
    pledgeTimes: bigint,
    pledgeTopHold: bigint
  ];
  export interface OutputObject {
    typeId: bigint;
    pledgeToken: bigint;
    pledgeReward: bigint;
    pledgeTimes: bigint;
    pledgeTopHold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Pool extends BaseContract {
  connect(runner?: ContractRunner | null): Pool;
  waitForDeployment(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  allAdmins: TypedContractMethod<[], [string[]], "view">;

  batchAddAdmin: TypedContractMethod<
    [amounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  dailyEarnings: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  exchange: TypedContractMethod<[typeId: BigNumberish], [void], "nonpayable">;

  getPledgePackageWithTypeId: TypedContractMethod<
    [_typeId: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isExchangeOpen: TypedContractMethod<[], [boolean], "view">;

  isWithdraw: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  pledgeReward: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pledgeTimes: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pledgeToken: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pledgeTopHold: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pledgeWeight: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  removeAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceAdmin: TypedContractMethod<[], [void], "nonpayable">;

  setAboutAddress: TypedContractMethod<
    [
      _pledgeWeightAddr: AddressLike,
      _pledgeStakeAddr: AddressLike,
      _intoSocialMiningAddr: AddressLike,
      _intoWeightAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setPledgePackage: TypedContractMethod<
    [
      _typeId: BigNumberish,
      _pledgeToken: BigNumberish,
      _pledgeReward: BigNumberish,
      _pledgeTimes: BigNumberish,
      _pledgeTopHold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setPledgePackages: TypedContractMethod<
    [
      _typeIds: BigNumberish[],
      _pledgeTokens: BigNumberish[],
      _pledgeRewards: BigNumberish[],
      _pledgeTimes: BigNumberish[],
      _pledgeTopHolds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "batchAddAdmin"
  ): TypedContractMethod<[amounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dailyEarnings"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchange"
  ): TypedContractMethod<[typeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPledgePackageWithTypeId"
  ): TypedContractMethod<
    [_typeId: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExchangeOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWithdraw"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pledgeReward"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pledgeTimes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pledgeToken"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pledgeTopHold"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pledgeWeight"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAboutAddress"
  ): TypedContractMethod<
    [
      _pledgeWeightAddr: AddressLike,
      _pledgeStakeAddr: AddressLike,
      _intoSocialMiningAddr: AddressLike,
      _intoWeightAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPledgePackage"
  ): TypedContractMethod<
    [
      _typeId: BigNumberish,
      _pledgeToken: BigNumberish,
      _pledgeReward: BigNumberish,
      _pledgeTimes: BigNumberish,
      _pledgeTopHold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPledgePackages"
  ): TypedContractMethod<
    [
      _typeIds: BigNumberish[],
      _pledgeTokens: BigNumberish[],
      _pledgeRewards: BigNumberish[],
      _pledgeTimes: BigNumberish[],
      _pledgeTopHolds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PledgePackage"
  ): TypedContractEvent<
    PledgePackageEvent.InputTuple,
    PledgePackageEvent.OutputTuple,
    PledgePackageEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PledgePackage(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PledgePackageEvent.InputTuple,
      PledgePackageEvent.OutputTuple,
      PledgePackageEvent.OutputObject
    >;
    PledgePackage: TypedContractEvent<
      PledgePackageEvent.InputTuple,
      PledgePackageEvent.OutputTuple,
      PledgePackageEvent.OutputObject
    >;
  };
}
